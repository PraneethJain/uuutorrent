services:
  app:
    build: ./backend
    ports:
      - "8000:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - DATABASE_URL=postgresql+asyncpg://uuutorrent_user:uuutorrentpassword@postgres:5432/uuutorrent
      - QB_API_URL=http://host.docker.internal:8080
    depends_on:
      - postgres
    networks:
      - app-network
      
  node_exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - app-network
  
  postgres:
    build:
      context: ./postgres
    ports:
      - "5433:5432" 
    environment:
      - POSTGRES_USER=uuutorrent_user
      - POSTGRES_PASSWORD=uuutorrentpassword
      - POSTGRES_DB=uuutorrent
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-pgexporter-user.sql:/docker-entrypoint-initdb.d/init-pgexporter-user.sql
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/init-pg-stat-statements.sql:/docker-entrypoint-initdb.d/init-pg-stat-statements.sql
    command: >
      -c listen_addresses='*'
      -c log_destination='stderr'
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c shared_preload_libraries='pg_stat_statements'
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c track_io_timing=on
    networks:
      - app-network
  
  pgexporter:
    build:
      context: ./pgexporter-build
    ports:
      - "5002:5002"
    volumes:
      - ./pgexporter.conf:/etc/pgexporter/pgexporter.conf
    depends_on:
      - postgres
    networks:
      - app-network

  pg-backup:
    build:
      context: ./pg-backup
    volumes:
      - pg_backups:/backups
    environment:
      - PGPASSWORD=uuutorrentpassword
    depends_on:
      - postgres
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - pgexporter
      - node_exporter
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  pg_backups:
